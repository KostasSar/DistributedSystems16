package servlets;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class AdminServlet
 */
@WebServlet("/AdminServlet")
public class AdminServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// allow access only if cookie exists

		Cookie[] cookies = request.getCookies();
		String userName = null;
		if (cookies != null) {
			for (Cookie cookie : cookies) {
				if (cookie.getName().equals("userName")) {
					userName = cookie.getValue();
				}
			}
		}

		if (userName == null) {
			response.sendRedirect("Login.html");
		} else {
			Connection con = (Connection) getServletContext().getAttribute("DBConnection");
			PreparedStatement ps = null;

			// Depending on which "Submit" button was pressed in the
			// "AdminActions.html" the according code is executed.

			// First submit button
			if (request.getParameter("button1") != null) {

				// Get information user has provided
				String newName = request.getParameter("uname");
				String newSurname = request.getParameter("usurname");
				String newId = request.getParameter("uid");
				String newPassword = request.getParameter("upwd");
				String newPosition = request.getParameter("position");
				String userActivities = null;
				int newStore = Integer.parseInt(request.getParameter("store"));

				if (newPosition.equals("Employee")) {
					userActivities = "Create customer form. Create vechicle form. Access to client list.";
				} else if (newPosition.equals("Mechanic")) {
					userActivities = "Check vehicle. Access to vehicle list. Modify and update vehicle list. Deliver cash prize.";
				}

				// Update Database
				try {
					ps = con.prepareStatement("INSERT INTO USERS VALUES (?,?,?,?,?,?,?)");
					ps.setString(1, newName);
					ps.setString(2, newSurname);
					ps.setString(3, newPassword);
					ps.setString(4, newId);
					ps.setInt(5, newStore);
					ps.setString(6, newPosition);
					ps.setString(7, userActivities);
					ps.executeUpdate();
					// If update was successful inform Administrator

					RequestDispatcher rd = getServletContext().getRequestDispatcher("/AdminActions.html");
					PrintWriter out = response.getWriter();
					out.println("<html><body>");
					out.println("<h1>New user account successfully created.</h1>");
					out.println("</body></html>");
					rd.include(request, response);
					// If update fails inform Administrator

				} catch (SQLException e) {
					e.printStackTrace();
					RequestDispatcher rd = getServletContext().getRequestDispatcher("/AdminActions.html");
					PrintWriter out = response.getWriter();
					out.println("<html><body>");
					out.println("<h1>Failed to create new user account.</h1>");
					out.println("</body></html>");
					rd.include(request, response);
				}

				// Second submit button

			} else if (request.getParameter("button2") != null) {

				String modId = request.getParameter("idfinderr");
				String newName = request.getParameter("uname");
				String newSurname = request.getParameter("usurname");
				String newPassword = request.getParameter("upsw");
				String nid = request.getParameter("uid");
				String newPosition = null;
				String userActivities = null;

				try {
					// Check if given user_id exists in database
					ps = con.prepareStatement("SELECT * FROM USERS WHERE Id = ?");
					ps.setString(1, modId);
					ps.executeQuery();

					// Check name field. If it is not empty, update database
					if (!newName.equals("null") && !newName.isEmpty()) {
						try {
							ps = con.prepareStatement("UPDATE  USERS SET Name=? WHERE Id=? ");
							ps.setString(1, newName);
							ps.setString(2, modId);
							ps.executeUpdate();
							
							RequestDispatcher rd = getServletContext().getRequestDispatcher("/AdminActions.html");
							PrintWriter out = response.getWriter();
							out.println("<font color=red>Name successfully modified.</font>");
							rd.include(request, response);
						} catch (SQLException e) {
							e.printStackTrace();
							RequestDispatcher rd = getServletContext().getRequestDispatcher("/AdminActions.html");
							PrintWriter out = response.getWriter();
							out.println("<html><body>");
							out.println("<h1>Failed to modify  user name.</h1>");
							out.println("</body></html>");
							rd.include(request, response);
						}
					}

					// Check surname field. If it is not empty, update
					// database
					if (!newSurname.equals("null") && !newSurname.isEmpty()) {
						try {
							ps = con.prepareStatement("UPDATE  USERS SET Surname=? WHERE Id=? ");
							ps.setString(1, newSurname);
							ps.setString(2, modId);
							ps.executeUpdate();
							RequestDispatcher rd = getServletContext().getRequestDispatcher("/AdminActions.html");
							PrintWriter out = response.getWriter();
							out.println("<font color=red>Surname successfully modified.</font>");
							rd.include(request, response);
						} catch (SQLException e) {
							e.printStackTrace();
							RequestDispatcher rd = getServletContext().getRequestDispatcher("/AdminActions.html");
							PrintWriter out = response.getWriter();
							out.println("<html><body>");
							out.println("<h1>Failed to modify  user surname.</h1>");
							out.println("</body></html>");
							rd.include(request, response);
						}
					}
					// Check password field. If it is not empty, update database
					if (!newPassword.equals("null") && !newPassword.isEmpty()) {
						try {
							ps = con.prepareStatement("UPDATE  USERS SET Password=? WHERE Id=? ");
							ps.setString(1, newPassword);
							ps.setString(2, modId);
							ps.executeUpdate();
							RequestDispatcher rd = getServletContext().getRequestDispatcher("/AdminActions.html");
							PrintWriter out = response.getWriter();
							out.println("<font color=red>Password successfully modified.</font>");
							rd.include(request, response);
						} catch (SQLException e) {
							e.printStackTrace();
							RequestDispatcher rd = getServletContext().getRequestDispatcher("/AdminActions.html");
							PrintWriter out = response.getWriter();
							out.println("<html><body>");
							out.println("<h1>Failed to modify  user password.</h1>");
							out.println("</body></html>");
							rd.include(request, response);
						}
					}
					// Check user id field. If it is not empty, update database
					if (!nid.equals("null") && !nid.isEmpty()) {
						if (nid.length() == 4) {
							int store = nid.charAt(0);
							if (nid.charAt(1) == 'e') {
								newPosition = "Employee";
								userActivities = "Create customer form. Create vechicle form. Access to client list.";
							} else if (nid.charAt(1) == 'e') {
								newPosition = "Mechanic";
								userActivities = "Check vehicle. Access to vehicle list. Modify and update vehicle list. Deliver cash prize.";
							}
							try {

								ps = con.prepareStatement(
										"UPDATE  USERS SET Id =?, Department=?, Position=? , Actions=?  WHERE Id=? ");

								ps.setString(1, nid);
								ps.setInt(2, store);
								ps.setString(3, newPosition);
								ps.setString(4, userActivities);
								ps.executeUpdate();

								RequestDispatcher rd = getServletContext().getRequestDispatcher("/AdminActions.html");
								PrintWriter out = response.getWriter();
								out.println("<html><body>");
								out.println("<h1> User account successfully modified.</h1>");
								out.println("</body></html>");
								rd.include(request, response);

							} catch (SQLException e) {
								e.printStackTrace();
								RequestDispatcher rd = getServletContext().getRequestDispatcher("/AdminActions.html");
								PrintWriter out = response.getWriter();
								out.println("<html><body>");
								out.println("<h1>Failed to modify  user account.</h1>");
								out.println("</body></html>");
								rd.include(request, response);
							}

						} else {
							RequestDispatcher rd = getServletContext().getRequestDispatcher("/AdminActions.html");
							PrintWriter out = response.getWriter();
							out.println("<html><body>");
							out.println("<h1>Can not find user id.Please try again.</h1>");
							out.println("</body></html>");
							rd.include(request, response);
						}

						

					}
					// Third submit button
				} catch (SQLException e) {
					e.printStackTrace();
					RequestDispatcher rd = getServletContext().getRequestDispatcher("/AdminActions.html");
					PrintWriter out = response.getWriter();
					out.println("<html><body>");
					out.println("<h1>Can not find user id : " +modId+" in database</h1>");
					out.println("</body></html>");
					rd.include(request, response);
				}
			} else if (request.getParameter("button3") != null) {
				

				String delId = request.getParameter("iddeleter");

				try {
					ps = con.prepareStatement("DELETE FROM USERS  WHERE Id=? ");
					ps.setString(1, delId);
					ps.executeUpdate();
					ps.executeUpdate();

					RequestDispatcher rd = getServletContext().getRequestDispatcher("/AdminActions.html");
					PrintWriter out = response.getWriter();
					out.println("<html><body>");
					out.println("<h1>User account successfully deleted.</h1>");
					out.println("</body></html>");
					rd.include(request, response);

				} catch (SQLException e) {
					e.printStackTrace();
					RequestDispatcher rd = getServletContext().getRequestDispatcher("/AdminActions.html");
					PrintWriter out = response.getWriter();
					out.println("<html><body>");
					out.println("<h1>Failed to delete user account.</h1>");
					out.println("</body></html>");
					rd.include(request, response);

				}
			} else if (request.getParameter("logout") != null) {
				// User is redirected to the log in page.
				RequestDispatcher rd = getServletContext().getRequestDispatcher("/Login.html");

				// If the user logs out all cookies are deleted.
				if (cookies != null) {
					for (Cookie cookie : cookies) {
						cookie.setMaxAge(0);
					}
				}
				// Inform user that the logout was successful.
				PrintWriter out = response.getWriter();
				out.println("<html><body>");
				out.println("<h1>Logout successful.</h1>");
				out.println("</body></html>");
				rd.include(request, response);

			}

		}
	}
}
